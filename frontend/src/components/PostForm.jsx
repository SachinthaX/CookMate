import React, { useState, useEffect } from 'react';
import { Button, Form, Alert } from 'react-bootstrap';
import { createPost, updatePost, getPost } from '../services/api';
import MediaPreview from './MediaPreview';

const PostForm = ({ postId, onSuccess }) => {
  const [formData, setFormData] = useState({
    description: '',
    mediaFiles: []
  });
  const [existingMedia, setExistingMedia] = useState([]);
  const [error, setError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Add debug logs
  useEffect(() => {
    console.log('Current form data:', formData);
    console.log('Existing media:', existingMedia);
  }, [formData, existingMedia]);

  const validateForm = () => {
    if (!formData.description.trim()) {
      setError('Description is required');
      return false;
    }

    if (formData.description.length > 500) {
      setError('Description cannot exceed 500 characters');
      return false;
    }

    if (formData.mediaFiles.length + existingMedia.length > 3) {
      setError('Maximum 3 media files allowed');
      return false;
    }

    setError(''); // Clear errors if validation passes
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(''); // Clear error at the start

    if (!validateForm()) return;

    setIsSubmitting(true);
    const formDataToSend = new FormData();
    formDataToSend.append('description', formData.description);
    formData.mediaFiles.forEach(file => {
      formDataToSend.append('mediaFiles', file);
    });

    try {
      const url = postId
        ? `http://localhost:8080/api/posts/${postId}`
        : 'http://localhost:8080/api/posts';
      const method = postId ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        body: formDataToSend,
        // headers: AUTO-GENERATED by browser for FormData
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(errorData || 'Request failed');
      }

      const result = await response.json();
      onSuccess(result);
    } catch (err) {
      console.error('API Error:', err);
      setError(err.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Form onSubmit={handleSubmit}>
      {error && <Alert variant="danger">{error}</Alert>}

      <Form.Group className="mb-3">
        <Form.Label>Description *</Form.Label>
        <Form.Control
          as="textarea"
          rows={3}
          value={formData.description}
          onChange={(e) => setFormData({...formData, description: e.target.value})}
          maxLength={500}
        />
        <small className="text-muted">
          {formData.description.length}/500 characters
        </small>
      </Form.Group>

      <Form.Group className="mb-3">
        <Form.Label>Upload Media (Max 3 files)</Form.Label>
        <Form.Control
          type="file"
          multiple
          onChange={(e) => setFormData({
            ...formData,
            mediaFiles: [...e.target.files]
          })}
          accept="image/*,video/*"
        />
        <small className="text-muted">
          Supported formats: images, videos (max 30s)
        </small>
      </Form.Group>

      <MediaPreview 
        files={formData.mediaFiles}
        existingMedia={existingMedia}
        onRemove={(index) => {
          const newFiles = [...formData.mediaFiles];
          newFiles.splice(index, 1);
          setFormData({...formData, mediaFiles: newFiles});
        }}
      />

      <Button 
        variant="primary" 
        type="submit"
        disabled={isSubmitting}
      >
        {isSubmitting ? 'Processing...' : (postId ? 'Update Post' : 'Create Post')}
      </Button>
    </Form>
  );
};

export default PostForm;